CuisineBizz - A restaurant search and review portal

CuizineBizz allows users to search for restaurants and places to eat nearby them. The data is retrieved using Yelp API 2.0. Users can search, review and rate items on the website.

CuisineBizz allows unregistered used to view the contents of the search results and view the reviews and rating for the restaurants. However, if the user wishes to post reviews to the restaurant that he/she has visited, they must register and log into the website to do so.

Every user once logged in has access to their profile page which has their basic information which they can edit as well as information about the reviews that they have posted. Additionally, CuisineBizz has a social element to it in terms of a ranking system. Users earn points based on how other users find their reviews. Users can vote on the reviews for it being helpful or not in which case the original poster for the review gets points or loses points respectively. Users can view their "foodie level" (calculated based on points earned) and their total points on their profile pages in a nice progress bar. Level 1 being the lowest while Level 5 being the highest a user can earn.

The website and all its elements are entirely built from scratch. All the styling is done manually in style.css file. No template was used whatsoever apart from the default bootstrap elements. The styling was inspired by Google's material design which is prevalent by the website's use of elevated cards to display information. Furthermore, the layout and positioning of elements was inspired from zomato.com's homepage.

Below is a detailed summary of each page, its features and how to interact with them.

a. Header:
The header is a common element throughout the website. It changes based on the session of the user.
i. Unregisterd users are shown the 'Home', 'Register', and 'Login' links.
ii. Logged in users are shown the 'Home', a profile page link indicated by their username, and a 'Logout' button.
iii. The admin is shown all the buttons a logged in user can see but an additional 'Dashboard' link that will take him to his administrative dashboard.

b. Footer:
The footer shows some metadata about the website and is common throughout the website.

1. Home page:
This is the front page for the website. The users are greeted with a clean and modern looking page with a search field in focus. Along with the search field, there is another fields that is used for the location of the search. I have used Google's Map API to do a reverse lookup to find the city of the user. Using HTML5's geolocation capabilities, the user's latitude and longitude are retrieved which are passed to Google's geocoder to get the best matching address. The city is then determined using the address and filled in the text field. Upon searching, the users are directed to a page where the search results are shown.
The page contains 4 quick picks that users might find interesting and are displayed at the center of the screen. On the sides are popular categories for enabling faster searching.

2. Search Page:
The search page shows the results of the user's query. It displays 10 results per page. To cycle through the pages I have implemented a simple pagination technique using next and previous buttons. The user may click on any result shown to take him to the detailed view of the restaurant. The search results show the name of the restaurant along with the star rating it has got. Additionally it also shows the 'tags' for that restaurant - the things the restaurant is more associated with, and a sample review.

3. Restaurant Page:
This page shows the details about the selected restaurant. The page starts with a screenwide map showing the location of the restaurant. I used the googlemaps api to render the map using the ngMap directive - a custom directive for angular.js to deal with google maps. (http://ngmap.github.io/)

The page follows with a restaurant image and the general details about the restaurant. Details include the name, address and phone number, rating value and stars, and a sample review. This data is provided by Yelp.

Below it all is the reviews generated by the users of CuisineBizz. Each review starts with a star rating for the review and is accompanied by the text of the review. Below each review is the reviewer's name as a ribbon on the card. Each review has two buttons denoted by a green thumbs-up sign and a red thumbs-down sign indicating upvote and downvotes. Each sign is accompanied by a number indicating how many times the review has been upvoted or downvoted respectively. Users can click either of the two only once to cast their votes.

On the right hand side (below on small screens) is a prompt for users to enter their own reviews. Users can hover on the stars and click the one they wish to give the restaurant. The rating stars is a part of Angular-UI package. The dependency for this was "ui.bootstrap". Below is a text area where users can review the restaurant. Upon clicking submit, the review is submitted.

4. Profile Page:
This page shows the profile for the loggedin user. On the header it shows the users name and date of joining along with a small 'bio' that users can set. The header shows the user's 'foodie-level' and the amount of points the user has amassed till now. Below it all is a sectioned progress element that shows the user's progress on each level as he goes about his reviewing journey.

The page shows a list of reviews that the user have submitted overall across the website. Here the user may edit their reviews if they chose to do so or delete the reviews entirely.

The page also allows the users to update information pertaining to their profile.

5. Admin Page:
This is the dashboard for the admin to control the users and reviews on the website. The page shows a tabular view of all the users of the website and all the reviews posted by the users for different restaurants. The admin can edit any information he/she likes. The admin may then moderate the content of the reviews posted and delete any offensive content.

6. Registration and Login Page:
These pages provide the forms to register and login to the site respectively. Validation on the forms is done using angular.js's inbuilt validation module and using the ngMessages directive.
Upon login, the user is stored in a session using ngCookies. Hence unless the user ends the session, he/she would be logged into the site.

Technologies Used:
1. AngularJS
2. NodeJS
3. Bootstrap
4. Yelp API
5. GoogleMaps API
6. Cookies
